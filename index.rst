
.. toctree::
   :glob:
   :hidden:

   *

.. _intro:

#######################
*Taller de* Micropython
#######################

.. revealjs-section::
    :data-background-color: #36760d
    :data-transition-speed: slow
    :data-transition: fade

**Programaci√≥n f√°cil y para todos de microcontroladores**

.. revealjs-notes::

  Hola a todos, muchas gracias por venir.



Sin **conocimientos** previos
=============================

.. revealjs-section::
    :data-background-color: #000000
    :data-background-image: _static/electronic_classroom.jpg

.. revealjs-notes::

   Este es un taller de microcontroladores con Micropython, el cual no requiere de conocimientos previos ni de
   Micropython, ni de microcontroladores ni de electr√≥nica. Iremos desde el principio, pero estoy seguro que quienes
   teng√°is ya experiencia, tambi√©n aprend√°is algo nuevo.



Ordenador **obligatorio**
=========================

.. revealjs-section::
    :data-background-color: #333333
    :data-background-video: _static/laptop.mp4
    :data-background-video-loop: true
    :data-background-size: cover

.. revealjs-notes::

   Durante este taller, ser√° necesario el uso de un ordenador con conexi√≥n a Internet. Si no hab√©is tra√≠do uno,
   podr√©is atender y mirar las pr√°cticas de los compa√±eros.



Conexi√≥n **WiFI**
=================

.. revealjs-section::
    :data-background-color: #000000
    :data-background-image: _static/wireless_background.png
    :data-background-size: cover

.. revealjs-notes::

   Vamos a lo primero, la conexi√≥n WiFi. Esperemos que vaya bien la red de la organizaci√≥n...
   ¬øVais teniendo ya conexi√≥n? ¬øC√≥mo os funciona?



QR
==

.. revealjs-section::
    :data-background-color: #4973ff
    :data-transition-speed: slow
    :data-transition: fade

.. image:: images/qr.svg
    :width: 60%

.. revealjs-notes::

   Vale, ahora que os vais conectando, id entrando a esta presentaci√≥n, la cual usaremos durante todo el taller.
   Os espero unos segundos... ¬øOs abre bien?



Kits de componentes
===================

.. revealjs-section::
    :data-background-color: #000000

.. revealjs-notes::

   Bien, como podr√©is haber adivinado, en este taller usaremos kits de componentes para trabajar, los cuales requieren
   del ordenador. Aqu√≠ tengo los kits, pero s√≥lo dispongo de 15. ¬øQui√©nes hab√©is mirado antes de venir los requisitos
   y ten√©is ya Internet? ¬øqui√©nes ya est√°is preparados con la presentaci√≥n abierta en Google Chrome? Os voy
   repartiendo.



Simulador **online**
====================

.. revealjs-section::
    :data-background-color: #333333
    :data-background-video: _static/wokwi.mp4
    :data-background-video-loop: true
    :data-background-size: cover

.. revealjs-notes::

   Los que no teng√°is kit, no os preocup√©is, que tambi√©n usaremos un simulador online. Tambi√©n podr√©is viendo ayudando
   a quienes tengan kit, luego os pedir√© que os cambi√©is de sitio para ver las pr√°cticas, cuando ya est√©n repartidos
   los kits de forma definitiva.



**Hello** world
===============

.. revealjs-section::
    :data-background-color: #090a0f

.. micropython-demo::
    :video: _static/demo0.mp4

    print(" ".join(["hello", "world"]))


.. revealjs-notes::

   Para comprobar el microcontrolador, conectad por USB, y en esta diapositiva pulsad en el bot√≥n de conectar, elegid
   el dispositivo, el cual suele ser algo as√≠ como USB JTAG y en el bot√≥n de ejecutar.


Posibles **problemas**
----------------------

.. revealjs-section::
    :data-background-color: #090a0f

.. revealjs-fragments::

    * üêß **GNU/Linux**. No est√° en el grupo dialout o no est√°n las reglas de udev `(ver soluci√≥n) <https://github.com/Nekmo/micropython-workshop/blob/master/demos/demo0/TROUBLESHOOTING.rst#gnulinux>`_.
    * ü™ü **Windows y Mac**. No est√°n los drivers instalados `(ver soluci√≥n) <https://github.com/Nekmo/micropython-workshop/blob/master/demos/demo0/TROUBLESHOOTING.rst#windows>`_.

.. revealjs-notes::

   Si no os funciona a la primera, pasadle por favor el kit a otra persona, no os qued√©is sin usarlo. Mientras tanto,
   intentad estas soluciones seg√∫n vuestro sistema. A los que ten√©is GNU/Linux, os recomiendo ir mirando la soluci√≥n,
   antes de recibir el kit de otro compa√±ero, para ganar tiempo. Cuando lo teng√°is resuelto, esperad que os llegue
   un kit y probad de nuevo.



Sobre m√≠ **Nekmo**
==================

.. revealjs-section::
    :data-background-color: #090a0f
    :data-transition-speed: slow
    :data-transition: fade

+------------------------------------+
|                                    |
| .. image:: images/cara.svg         |
|   :width: 200px                    |
|                                    |
| *Programador Python*               |
|                                    |
+------------------------------------+

.. revealjs-notes::

   Ahora, mientras vais probando los kits, dejadme presentarme... Soy Juan Jos√©, aunque muchos me conocen en redes
   como Nekmo, y puede que me conozc√°is por charlas anteriores tanto aqu√≠ como en Python M√°laga.


Otras **charlas**...
====================

.. image:: images/talks1.jpg
   :width: 32%
   :align: center

.. image:: images/talks2.jpg
   :width: 32%
   :align: center

----------

.. image:: images/python-malaga-logo-white.png
   :width: 10%
   :align: center

.. image:: images/plytix-logo-white.svg
   :width: 35%
   :align: center

.. revealjs-section::
    :data-background-color: #090a0f

.. revealjs-notes::

   Si ven√≠s de M√°laga, os recomiendo echarle un ojo a nuestra asociaci√≥n, donde hacemos charlas tan chulas como la
   que veis en las fotos. Hemos hecho concursos, networking, y mucho m√°s. Las im√°genes son de un evento del a√±o
   pasado en las oficinas para las que trabajo, en Plytix. *Permitidme preguntar, ¬øcu√°ntos ten√©is ya funcionando
   el kit?*


Microcontroladores
==================

.. revealjs-section::
    :data-background-color: #000000
    :data-background-image: _static/microcontrollers_background.png

.. revealjs-notes::

   No os preocup√©is si os segu√≠s peleando con ello, s√≥lo recordad pasarle el kit a otro mientras
   equipo. Mientras, voy a ir hablando de los microcontroladores.



¬øQu√© son?
---------

.. revealjs-section::
    :data-background-color: #090a0f

.. revealjs-fragments::

    * **Ventajas**

      * ü§è Peque√±os
      * ü§ë Econ√≥micos
      * ü™´ Bajo consumo

    * **Desventajas**

      * üê¢ Poco potentes
      * üòì Programaci√≥n m√°s compleja

.. revealjs-notes::

   Como os podr√©is imaginar por el nombre, los microcontroladores son peque√±os ordenadores, como puede ser una Raspberry
   Pi, pero mucho m√°s peque√±os y con menos recursos. Entre sus ventajas tenemos [...] y entre sus desventajas [...].



Algunos **usos**
----------------

.. revealjs-section::
    :data-background-color: #090a0f

.. revealjs-fragments::

    * ‚òÅÔ∏è Dom√≥tica
    * ü§ñ Rob√≥tica
    * üîå Electr√≥nica
    * üöß Prototipos
    * ...

.. revealjs-notes::

   Se utilizan en muchos √°mbitos, como la dom√≥tica, rob√≥tica, electr√≥nica, prototipos y muchos m√°s. *Veremos algunos
   ejemplos finales como este coche teledirigido, o este dron*.



GIF robot
---------

.. revealjs-section::
    :data-background-color: #333333
    :data-background-video: _static/robot_fall.mp4
    :data-background-video-loop: true
    :data-background-size: cover

.. revealjs-notes::

   Gracias a ellos, podr√©is competir contra Boston Dynamics en rob√≥tica, y conseguir im√°genes graciosas como esta.


Variantes
---------

.. revealjs-section::
    :data-background-color: #090a0f

.. revealjs-fragments::

    * **ESP8266/ESP32**

      * ü§ë Muy **econ√≥mico**
      * üòÑ M√∫ltiples **variantes**
      * üë• Gran **comunidad**

    * **Raspberry Pi Pico**

      * üí∏ **Econ√≥mico**
      * üî® Gran **soporte**
      * üìö Bien **documentado**

.. revealjs-notes::

   Entre los microcontroladores que soportan Micropython podemos destacar los ESP8266 y ESP32 [...] o la Raspberry Pi
    Pico [...], u otros m√°s caros como la PyBoard, la oficial de Micropython.



ESP32
=====

.. revealjs-section::
    :data-background-color: #000000
    :data-background-image: _static/esp32_background.jpg

.. revealjs-notes::

   Pero en este taller vamos a utilizar un ESP32, porque sencillamente...



Dinero
------

.. revealjs-section::
    :data-background-color: #333333
    :data-background-video: _static/empty_wallet.mkv
    :data-background-video-loop: true
    :data-background-size: cover

.. revealjs-notes::

   ... la pela es la pela. Y es que son los m√°s econ√≥micos. El microcontrolador que ten√©is delante vuestra, cuesta
   entre 1.5‚Ç¨ aproximadamente. *Y hablando del ESP32, ¬øc√≥mo llev√°is los kits? A√∫n tengo para rato, por lo que pod√©is
   probando, descuidad...*



Caracter√≠sticas
---------------

.. revealjs-section::
    :data-background-color: #090a0f

.. revealjs-fragments::

    * üí™ **Doble** n√∫cleo
    * üõú Conectividad **WiFi**
    * üì° Conectividad **Bluetooth**
    * üîå M√∫ltiples pines **GPIO**
    * üìü **ADC** / **DAC**

.. revealjs-notes::

   Pero no s√≥lo es barato. Tambi√©n tiene un mont√≥n de caracter√≠sticas interesantes como [...].



Micropython
===========

.. image:: images/micropython-logo.svg
   :width: 35%
   :align: center

.. revealjs-section::
    :data-background-color: #090a0f

.. revealjs-notes::

   Si record√°is, hemos dicho como uno de sus puntos d√©biles que son dif√≠ciles de programar. Y hasta hace no mucho era
   as√≠. Pero desde hace unos a√±os, tenemos algunas soluciones como Micropython que nos permiten programar estos
   microcontroladores de una forma m√°s sencilla. Micropython es una variante de Python 3 reducida y adaptada para
   algunos de estos microcontroladores.


**Primeros** pasos
------------------

.. revealjs-section::
    :data-background-color: #090a0f

.. revealjs-fragments::

    * ‚ö° **Flashear** siguiendo la web de `Micropython <https://micropython.org/>`_
    * üìù **IDE web** `(ViperIDE) <https://viper-ide.org/>`_, local `(Thonny) <https://thonny.org/>`_
      o **esta presentaci√≥n**
    * ‚ñ∂Ô∏è **Simulador online** `(Wokwi) <https://wokwi.com/>`_.


.. revealjs-notes::

   Y empezar con Micropython es muy sencillo. S√≥lo ten√©is que descargar el binario del sitio web oficial, y flashearlo
   mediante la herramienta indicado. Los microcontroladores que ten√©is, ya los he flasheado yo en casa. Tras ello,
   pod√©is usar un IDE web como Viper IDE, o un IDE local como Thonny. Tambi√©n pod√©is usar un simulador online como
   Wokwi, si no ten√©is un microcontrolador f√≠sico. Y aunque lo teng√°is, os recomiendo utilizarlo, ya que os permitir√°
   probar cosas sin miedo a romper nada.



¬øPor qu√© **Micropython**?
-------------------------

.. revealjs-section::
    :data-background-color: #090a0f

.. revealjs-fragments::

    * **Ventajas**

      * üòÑ **F√°cil** de aprender
      * üöÄ **Prototipado** r√°pido
      * üîã **Pilas incluidas**

    * **Desventajas**

      * üê¢ M√°s **lento**
      * üì¶ Menos **m√≥dulos**
      * üìè Menos **memoria**

.. revealjs-notes::

   ¬øY por qu√© usar Micropython? Entre sus ventajas tenemos [...] y entre sus desventajas [...]. A√∫n as√≠, es una
   herramienta fant√°stica para iniciarse en este mundillo, y es genial para prototipar ideas r√°pidamente.



Nos **recolocamos**
===================

.. revealjs-section::
    :data-background-color: #000000
    :data-background-image: _static/juego_sillas.jpg


.. revealjs-notes::

    Y listas las presentaciones, vamos a movernos un poco para quienes no tengan un kit tambi√©n puedan ver y colaborar.
    Vamos, que es como si jug√°semos a las sillas. Levantad la mano quienes teng√°is un kit. Perfecto. Vamos a intentar
    entre todos, que quienes no tengan kit, tengan la oportunidad de ver y colaborar en las pr√°cticas.



Lo b√°sico de **electr√≥nica**
============================

.. revealjs-section::
    :data-background-color: #090a0f

.. revealjs-fragments::

    * ‚ö° La mayor√≠a de los componentes son **polarizados**.
    * üåç Todos los componentes deben ir a **tierra** (cable *negro*).
    * üí° Usar **resistencias** con los *LED*.

.. revealjs-notes::

   Y mientras termin√°is de asentaros, vamos a reparas algunas cosas b√°sicas de electr√≥nica. Recordar: [...]

Protoboard
----------

.. revealjs-section::
   :data-background-color: #DDDDDD

.. image:: images/protoboard.png
    :width: 60%

.. revealjs-notes::

   Para las pr√°cticas, usaremos una protoboard. En esta, las filas del centro est√°n conectadas entre s√≠,
   y las columnas de los lados, que usaremos para tierra y el voltaje (esto √∫ltimo s√≥lo en las √∫ltimas
   pr√°cticas), tambi√©n est√°n conectadas entre s√≠. Aprovecharemos esto para hacer uniones entre cables y
   componentes.

Avisos de **seguridad**
-----------------------

.. revealjs-section::
    :data-background-color: #090a0f

.. revealjs-fragments::

   * üö´ **NUNCA cortocircuitar** pines.
   * ‚ö†Ô∏è **CUIDADO** con el **pin de 5V**.
   * üëÅÔ∏è **Fijarse** bien antes de conectar cables y componentes.

.. revealjs-notes::

   Y por √∫ltimo, pero no m√°s importante, unos avisos importantes de seguridad: [...].

Demos
=====

.. revealjs-section::
    :data-background-color: #333333
    :data-background-video: _static/resistor_fire.mp4
    :data-background-video-loop: true
    :data-background-size: cover

.. revealjs-notes::

   Y ahora, seguro que quer√©is que empecemos a hacer cosas. Esperemos que no tengamos ninguna desgracia.



Encender un **led**
===================

.. revealjs-section::
    :data-background-color: #333333
    :data-background-video: _static/leds.mp4
    :data-background-video-loop: true
    :data-background-size: cover

.. revealjs-notes::

   Vamos a empezar por lo m√°s sencillo de todo. Encender un led. El ejemplo m√°s t√≠pico de todos.



Identificar **los pines**
-------------------------

.. revealjs-section::
   :data-background-color: #DDDDDD

.. image:: images/datasheet.png
   :width: 60%

.. revealjs-notes::

   Aunque antes de empezar cualquier circuito, es imprescindible identificar los pines de nuestro controlador. Aqu√≠
   ten√©is los pines de nuestro ESP32. De momento s√≥lo trabajaremos con el GPIO 1 y la tierra. Cuidado al identificar
   la tierra, ya que est√° justo al lado del pin de 5V, el cual no debemos usar de momento.


**Conectar** el led
-------------------

.. revealjs-section::
   :data-background-color: #DDDDDD

.. image:: images/resistor.png
   :width: 30%

.. image:: images/led.png
   :width: 20%

* `‚úèÔ∏è Ejercicio sin resolver <https://wokwi.com/projects/441387172284308481>`_
* `‚úÖ Ejercicio resuelto <https://wokwi.com/projects/441386639666392065>`_

.. revealjs-notes::

   Para nuestro circuito, necesitaremos un LED como el que ten√©is en la imagen. Necesitaremos adem√°s una resistencia
   para protegerlo. Aqu√≠ debajo ten√©is enlaces al simulador online Wokwi. Empezaremos con el ejercicio sin resolver, y
   siendo el primero, voy a resolverlo yo primero junto con vosotros.



C√≥digo **led**
--------------

.. revealjs-section::
    :data-background-color: #090a0f

.. micropython-demo::
    :video: _static/demo1.mp4

    from machine import Pin
    from time import sleep

    led = Pin(1, Pin.OUT)

    while True:
        led.on()
        sleep(0.5)
        led.off()
        sleep(0.5)



LED **anal√≥gico**
=================

.. revealjs-section::
   :data-background-color: #DDDDDD

.. video:: _static/led_breathing.mkv
   :width: 60%
   :autoplay:
   :loop:
   :muted:

* `‚úèÔ∏è Ejercicio sin resolver <https://wokwi.com/projects/441387365772801025>`_
* `‚úÖ Ejercicio resuelto <https://wokwi.com/projects/440571798883168257>`_

.. revealjs-notes::

   Ahora, sin cambiar nada en el circuito, vamos a hacer que el led var√≠e su intensidad. Mientras que en el anterior
   ejemplo s√≥lo se comportaba de forma digital, es decir, encendido o apagado, en este caso lo haremos de forma
   anal√≥gica, lo cual nos permitir√° variar su intensidad. En esta ocasi√≥n, os dejo a vosotros resolver el ejercicio, y
   luego lo vemos juntos.



C√≥digo led **anal√≥gico**
------------------------

.. revealjs-section::
    :data-background-color: #090a0f

.. micropython-demo::
    :video: _static/demo2.mp4

    from machine import Pin, PWM
    from time import sleep

    led = Pin(1)
    pwm = PWM(led)


    while True:
        for i in range(0, 1024, 10):
            pwm.duty(i)
            sleep(0.01)
        for i in range(1023, -1, -10):
            pwm.duty(i)
            sleep(0.01)



GIF luces LED
-------------

.. revealjs-section::
    :data-background-color: #333333
    :data-background-video: _static/house_leds.mp4
    :data-background-video-loop: true
    :data-background-size: cover

.. revealjs-notes::

   Y ahora, ya sab√©is c√≥mo llenar vuestra casa de lucecitas LED.



Conectar **un bot√≥n**
=====================

.. revealjs-section::
   :data-background-color: #DDDDDD

.. image:: images/switch.png
   :width: 30%

* `Ejercicio sin resolver <https://wokwi.com/projects/441388877026727937>`_
* `Ejercicio resuelto <https://wokwi.com/projects/440572379251171329>`_


.. revealjs-notes::

   No s√≥lo podemos entregar valores de salida. Tambi√©n podemos leer valores de entrada, como es el caso con el bot√≥n
   que ten√©is en la imagen. El circuito es similar al del LED, pero en este caso no usaremos una resistencia, ya que el
   propio microcontrolador tiene una resistencia pull-up interna, la cual debemos configurar para usarla. Tened en
   cuenta que el bot√≥n tiene 4 patillas, estando unidas a pares. Las patillas que est√°n unidas, son las que est√°n m√°s
   lejos entre s√≠. Haremos con el ejercicio igual que antes, pero esta vez tendr√©is que hacer el circuito.



**C√≥digo** bot√≥n
----------------

.. revealjs-section::
    :data-background-color: #090a0f

.. micropython-demo::
    :video: _static/demo3.mp4

    from machine import Pin, UART
    from time import sleep

    button = Pin(1, Pin.IN, Pin.PULL_UP)


    while True:
        state = not button.value()
        print(int(state))
        sleep(0.1)



GIF recreativa
--------------

.. revealjs-section::
    :data-background-color: #333333
    :data-background-video: _static/arcades.mp4
    :data-background-video-loop: true
    :data-background-size: cover

.. revealjs-notes::

   Con esto, ya est√°is capacitados para crear vuestra propia recreativa con todos los botones que quer√°is.



Conectar un **LED RGB**
=======================

.. revealjs-section::
   :data-background-color: #DDDDDD

.. image:: images/resistor.png
   :width: 30%

.. image:: images/rgb_led.png
   :width: 14%

* `Ejercicio sin resolver <https://wokwi.com/projects/441390660052679681>`_
* `Ejercicio resuelto <https://wokwi.com/projects/440573050467784705>`_


.. revealjs-notes::

   Y para vuestra recreativa, no pueden faltar LEDs RGB a todo color. Como muchos sabr√©is, las siglas de RGB proceden de
   Red, Green y Blue, que son los colores primarios de la luz. Cada uno de estos colores corresponder√° a un pin GPIO,
   por lo que esta vez necesitaremos tres pines, y un cuarto pin para tierra. De la imagen, el pin de tierra es el m√°s
   largo, y los otros tres son los de los colores. Recordad usar resistencias por cada pin de color. El circuito es
   igual que el del LED normal, pero con 3 LEDs en uno solo. Ahora, os dejo con el ejercicio.



**C√≥digo** LED RGB
------------------

.. revealjs-section::
    :data-background-color: #090a0f

.. micropython-demo::
    :video: _static/demo4.mp4

    from machine import Pin, PWM
    from time import sleep
    import urandom


    r = PWM(Pin(1), freq=1000)
    g = PWM(Pin(2), freq=1000)
    b = PWM(Pin(3), freq=1000)


    def set_color(red, green, blue):
        r.duty(red)
        g.duty(green)
        b.duty(blue)


    while True:
        red = urandom.getrandbits(10)
        green = urandom.getrandbits(10)
        blue = urandom.getrandbits(10)
        set_color(red, green, blue)
        sleep(1)



GIF cientos de cables
---------------------

.. revealjs-section::
    :data-background-color: #333333
    :data-background-video: _static/cables.mp4
    :data-background-video-loop: true
    :data-background-size: cover

.. revealjs-notes::

   Pero claro, si quisi√©semos tener varios leds RGB, cada uno con su color, necesitar√≠amos un mont√≥n de cables y ocupar
   todos los pines GPIO de nuestra placa, los cuales son muy valiosos. Para ello disponemos de protocolos de
   comunicaci√≥n, que nos permiten comunicarnos con varios dispositivos a la vez.



**Protocolos** de comunicaci√≥n
==============================

.. revealjs-section::
    :data-background-color: #090a0f

.. revealjs-fragments::

    * 1Ô∏è‚É£ **OneWire** (1 pin)
    * 2Ô∏è‚É£ **I2C** (2 pines)
    * 3Ô∏è‚É£ **SPI** (3/4+ pines)
    * üìü **UART** (2+ pines)

.. revealjs-notes::

   Disponemos de diferentes protocolos de comunicaci√≥n, que suelen variar en el n√∫mero de pines, en su velocidad,
   su uso, etc. Por ejemplo, oneWire s√≥lo llega a necesitar un pin, pero es muy lento. I2C s√≥lo necesita 2 pines, siendo
   muy popular. SPI parte de 3 a 4 pines, pudiendo requerir m√°s si tenemos varios dispositivos. UART, que algunos
   recordar√©is de los serial bus, parte de 2 pines... y as√≠ podr√≠amos continuar. Tambi√©n tenemos protocolos espec√≠ficos
   y dise√±ados para casos concretos, como el que veremos ahora. Recordad que con cada protocolo, necesitaremos utilizar
   adicionalmente una tierra, que no se cuenta como pin de comunicaci√≥n.



Conectar un **led WS2812**
==========================

.. revealjs-section::
   :data-background-color: #DDDDDD

.. image:: images/resistor.png
   :width: 25%

.. image:: images/apa106.png
   :width: 10%

* `Ejercicio sin resolver <https://wokwi.com/projects/441391974099865601>`_
* `Ejercicio resuelto <https://wokwi.com/projects/440574036913642497>`_


.. revealjs-notes::

   Vamos a empezar con el protocolo WS2812, o APA106, que es el que utilizan los LEDs RGB de tipo NeoPixel. Este
   protocolo unidireccional s√≥lo necesita un pin de datos, pudiendo conectar varios LEDs a la vez, cada uno con su
   color. En la imagen ten√©is un LED de tipo Neopixel, no lo confund√°is con el anterior. Cada patilla tiene su longitud.
   El pin m√°s largo es 5V, el que est√° a su lado izquierdo es el de tierra, el m√°s corto es el de datos, y el que est√°
   al otro lado es la salida, que nos permitir√° conectar m√°s LEDs en cadena. Cuando hag√°is el circuito, no
   conect√©is el pin de 5V hasta que est√©is seguros de que todo est√° bien, y fijaros bien en los pines, o quemar√©is el
   LED. Ahora, os dejo con el ejercicio.



**C√≥digo** LED WS2812
---------------------

.. revealjs-section::
    :data-background-color: #090a0f

.. micropython-demo::
    :video: _static/demo5.mp4

    from machine import Pin
    from apa106 import APA106
    from time import sleep

    NUM_LEDS = 3

    pin = Pin(1)
    leds = APA106(pin, NUM_LEDS)
    colors = [
        (255, 0, 0),
        (0, 255, 0),
        (0, 0, 255),
    ]
    offset = 0


    while True:
        for num_led in range(NUM_LEDS):
            next_color = colors[(num_led + offset) % NUM_LEDS]
            leds[num_led] = next_color
        leds.write()
        offset = (offset + 1) % NUM_LEDS
        sleep(0.5)



**I2C**
=======

.. revealjs-section::
    :data-background-image: _static/i2c_background.png
    :data-background-size: cover

.. revealjs-notes::

   Aunque el protocolo WS2812 nos permite controlar m√∫ltiples LEDs individualmente con un solo cable, es un protocolo
   unidireccional dise√±ado en exclusiva para LEDs. En cambio, tenemos otros protocolos como I2C, que nos permiten
   comunicarnos con otros dispositivos, como pantallas, sensores, etc. Es un protocolo bidireccional que como dijimos
   antes, s√≥lo necesita 2 pines. Para esta pr√°ctica, vamos a conectar una pantalla y un sensor a un mismo I2C. A los
   que hay√°is terminado el ejercicio anterior, ahora os dar√© el kit para esta pr√°ctica, de la cual s√≥lo tengo 5. Si
   os qued√°is esperando, os puedo dar otros componentes para que hag√°is m√°s pruebas.



Conectar **sensor** y **pantalla I2C**
======================================

.. revealjs-section::
   :data-background-color: #DDDDDD

.. image:: images/sht41.png
   :width: 26%

.. image:: images/ssd1306.png
   :width: 30%

* `Ejercicio sin resolver <https://wokwi.com/projects/441394565508740097>`_
* `Ejercicio resuelto <https://wokwi.com/projects/441393628155164673>`_

.. revealjs-notes::

   Para esta p≈ïactica, vamos a conectar tanto la pantalla como un sensor de temperatura a un mismo I2C, el cual utiliza
   2 pines, SDA y SCL. Necesitaremos adem√°s una tierra y una alimentaci√≥n. Cada dispositivo I2C tiene una direcci√≥n
   √∫nica, la cual debemos conocer para comunicarnos con √©l. No obstante, podemos utilizar el esc√°ner I2C para conocer
   la direcci√≥n de nuestros dispositivos. En este caso, la pantalla es una OLED de 128x64 p√≠xeles, y el sensor un SHT41
   para medir la temperatura y humedad. No necesitaremos resistencias, y qu√© es cada pin est√° indicado en el componente.
   Vamos ahora con el ejercicio.


**C√≥digo** sensor y pantalla I2C
--------------------------------

.. revealjs-section::
    :data-background-color: #090a0f

.. micropython-demo::
    :video: _static/demo6.mp4

    from machine import Pin, I2C
    from time import sleep
    from ssd1306 import SSD1306_I2C
    from sht4x import SHT4X


    scl = Pin(1)
    sda = Pin(2)
    i2c = I2C(0, scl=scl, sda=sda)
    print(i2c.scan())

    oled = SSD1306_I2C(128, 64, i2c, 0x3C)
    sensor = SHT4X(i2c, 0x44)


    while True:
        temperature, humidity = sensor.measurements
        oled.fill(0)
        temperature_text = "Temp: {:.1f} C".format(temperature)
        humidity_text = "Hum:  {:.1f} %".format(humidity)
        oled.text(temperature_text, 0, 10)
        oled.text(humidity_text, 0, 30)
        oled.show()
        sleep(2)



**WiFi** y **bluetooth**
========================

.. revealjs-section::
    :data-background-image: _static/wireless_background.png
    :data-background-size: cover

.. revealjs-notes::

   Pero no s√≥lo disponemos de protocolos de comunicaci√≥n al√°mbrica, es decir, cableada. Todos los modelos de ESP32,
   como el que ten√©is delante, cuentan con WiFi y bluetooth. Y algunos modelos tambi√©n Zigbee.



**C√≥digo** coche
----------------

.. revealjs-section::
    :data-background-color: #090a0f

.. revealjs-section::
    :data-background-color: #000303

.. micropython-demo::
    :video: _static/demo7.mp4

    import json
    import time
    import network
    import web
    from hardware import I2C
    from hardware import Pin
    from web import WebSocket
    import uasyncio as asyncio

    i2c0 = I2C(0, scl=Pin(26), sda=Pin(0), freq=400000)
    i2c0.writeto_mem(0x38, 0x00, bytearray([0, 0, 0, 0]))

    ap = network.WLAN(network.AP_IF)
    ap.active(True)
    ap.config(essid='roverc.pro', password='roverc.pro', authmode=network.AUTH_WPA_WPA2_PSK)

    while not ap.active():
        time.sleep(1)

    ip = ap.ifconfig()[0]
    print('IP:', ip)

    app = web.App(host='0.0.0.0', port=80)


    def normalize_value(value: int | float) -> bytes:
        value = int(value)
        if value >= 128:
            value = 127  # The maximum value in positive is 127
        if value < 0:
            value = (256 + value)
        return value.to_bytes(1, "big")


    def coords_to_mecano_wheels(x: int, y: int, maximum: int = 127):
        r1 = x + y
        r2 = -x + y
        r3 = -x + y
        r4 = x + y
        values = [r1, r2, r3, r4]
        max_val = max(abs(v) for v in values)
        if max_val > maximum:
            factor = maximum / max_val
            values = [v * factor for v in values]
        return [normalize_value(v) for v in values]


    async def serve_static(w, filename, mimetype):
        # write http headers
        w.write('HTTP/1.0 200 OK\r\n')
        w.write(f'Content-Type: {mimetype}; charset=utf-8\r\n')
        w.write('\r\n')
        # write page body
        with open(filename, 'r') as f:
            w.write(f.read())
        # drain stream buffer
        await w.drain()


    # root route handler
    @app.route('/')
    async def handler(r, w):
        return await serve_static(w, "index.html", "text/html")


    # root route handler
    @app.route('/joy.min.js')
    async def serve_script(r, w):
        return await serve_static(w, "joy.min.js", "application/javascript")


    # /ws WebSocket route handler
    @app.route('/ws')
    async def ws_handler(r, w):
        # upgrade connection to WebSocket
        ws = await WebSocket.upgrade(r, w)
        latest = None
        while True:
            evt = await ws.recv()
            if evt is None or evt['type'] == 'close':
                # handle closed stream/close event
                break
            elif evt['type'] == 'text':
                # print received messages and echo them
                print('Received:', evt['data'])
                data = json.loads(evt['data'])
                if "x" in data and "y" in data:
                    x, y = data['x'], data['y']
                    if (x, y) == latest:
                        continue
                    try:
                        wheel1, wheel2, wheel3, wheel4 = coords_to_mecano_wheels(x, y)
                    except OverflowError:
                        continue
                    print("Wheels:", *(w[0] for w in (wheel1, wheel2, wheel3, wheel4)))
                    i2c0.writeto_mem(0x38, 0x00, b"".join([wheel1, wheel2, wheel3, wheel4]))
                    latest = x, y
                elif "claw" in data:
                    value = 8 if data["claw"] else 87
                    i2c0.writeto_mem(0x38, 0x10, value.to_bytes(1, 'big'))


    # Start event loop and create server task
    loop = asyncio.get_event_loop()
    loop.create_task(app.serve())
    loop.run_forever()

.. revealjs-notes::

   En este √∫ltimo ejemplo no me voy a extender mucho. Inicializamos un access point, y un servidor web con soporte para
   websockets, el cual permite conectarnos al coche y controlarlo desde el navegador.



Demo **coche**
--------------

.. revealjs-section::
   :data-background-color: #DDDDDD

.. raw:: html

    <iframe src="http://192.168.4.1/" height="600px" width="100%" style="border: 0;"></iframe>


.. revealjs-notes::

   ¬°Ahora, vamos a ver el coche en acci√≥n!



¬°Pru√©balo t√∫ mismo!
-------------------

.. revealjs-section::
   :data-background-color: #DDDDDD

* **SSID:** roverc.pro
* **Password:** roverc.pro
* **Url:** http://192.168.4.1


.. revealjs-notes::

   Y por si os sabe a poco, ¬°os invito a probarlo vosotros mismos! Conectad vuestro m√≥vil al wifi del coche, y acceded a
   la direcci√≥n indicada.



ESP-Now
=======

.. revealjs-section::
    :data-background-image: _static/wireless_background.png
    :data-background-size: cover

.. revealjs-notes::

   Adem√°s, Espressif, la empresa detr√°s de los ESP, ha desarrollado un protocolo de comunicaci√≥n propio que se encuentra
   disponible en Micropython, basado en WiFi. Es m√°s sencilllo de utilizar, tiene una menor latencia, un mayor alcance,
   y un menor consumo que el WiFi tradicional. Es un protocolo perfecto para por ejemplo...



Demo **dron**
--------------

.. revealjs-section::
   :data-background-color: #DDDDDD


.. revealjs-notes::

   ¬°Un dron!



¬°Muchas gracias a todos!
========================

.. revealjs-section::
    :data-background-gradient: linear-gradient(-45deg, #ee7752, #e73c7e, #23a6d5, #23d5ab);

.. revealjs-notes::

    Y mientras os dejo jugando con el coche... ¬°Hasta aqu√≠ la presentaci√≥n! Espero que hay√°is disfrutado y aprendido
    algo nuevo. S√© que he ido muy r√°pido, pero si ten√©is dudas, estoy disponible para resolverlas.



Recursos
========

.. revealjs-section::
    :data-background-color: #333333
    :data-transition-speed: default
    :data-transition: fade

.. revealjs-fragments::

    * üåê **Web oficial**: https://micropython.org
    * üìù **Editor online**: https://viper-ide.org
    * ü•Ω **Simulador online**: https://wokwi.com

.. revealjs-notes::

   Os dejo aqu√≠ disponibles estos recursos, para empezar a trabajar con Micropython.



Python **M√°laga**
=================

.. revealjs-section::
    :data-background-color: #4973ff
    :data-transition-speed: slow
    :data-transition: fade

* üåê **Sitio web:** `python-malaga.es <https://www.python-malaga.es/>`_.
* ü§ù **Meetup:** `meetup.com/Python-Malaga <https://www.meetup.com/Python-Malaga/>`_.
* üê¶ **Twitter:** `@python_malaga <https://twitter.com/python_malaga>`_.
* ‚Äçüíº **LinkedIn:** `linkedin.com/groups/13110576 <https://www.linkedin.com/groups/13110576/>`_.
* üì± **Telegram:** `python_malaga <https://t.me/python_malaga>`_.

.. revealjs-notes::

   Y para m√°s presentaciones, apuntaros a la comunidad de Python M√°laga, donde hacemos m√°s charlas como esta. No
   olvid√©is seguirnos en nuestras redes sociales, y en nuestro grupo de Telegram.



**Contactar**
-------------

.. revealjs-section::
    :data-background-color: #333333
    :data-transition-speed: default
    :data-transition: fade

* üåê **Sitio web:** `nekmo.com <https://nekmo.com>`_
* üì´ **Email:** `contacto@nekmo.com <mailto:contacto@nekmo.com>`_
* üê¶ **Twitter:** `@nekmocom <https://twitter.com/nekmocom>`_
* üì± **Telegram:** `@nekmo <https://t.me/nekmo>`_
* üí° **Jabber:** `nekmo@nekmo.org <xmpp://nekmo@nekmo.org>`_

.. revealjs-notes::

   A cualquier cosa, ten√©is mi contacto disponible.
